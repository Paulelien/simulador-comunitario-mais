import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime
import json
import io
import base64
from reportlab.lib.pagesizes import letter
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.lib import colors

def generar_pdf():
    """Genera un PDF con el resumen completo del diagn√≥stico comunitario"""
    buffer = io.BytesIO()
    doc = SimpleDocTemplate(buffer, pagesize=letter)
    styles = getSampleStyleSheet()
    story = []
    
    # T√≠tulo
    title_style = ParagraphStyle(
        'CustomTitle',
        parent=styles['Heading1'],
        fontSize=16,
        spaceAfter=30,
        alignment=1
    )
    story.append(Paragraph("DIAGN√ìSTICO COMUNITARIO EN APS", title_style))
    story.append(Paragraph("Modelo MAIS - Salud Familiar y Comunitaria", styles['Heading2']))
    story.append(Spacer(1, 20))
    
    # Informaci√≥n general
    story.append(Paragraph("INFORMACI√ìN GENERAL", styles['Heading2']))
    story.append(Spacer(1, 12))
    
    if st.session_state.sectores:
        story.append(Paragraph(f"Total de Sectores: {len(st.session_state.sectores)}", styles['Normal']))
        total_poblacion = sum(s["poblacion_total"] for s in st.session_state.sectores)
        story.append(Paragraph(f"Poblaci√≥n Total: {total_poblacion:,}", styles['Normal']))
        total_familias = sum(s["num_familias"] for s in st.session_state.sectores)
        story.append(Paragraph(f"Total de Familias: {total_familias:,}", styles['Normal']))
    
    if st.session_state.familias:
        story.append(Paragraph(f"Familias Registradas: {len(st.session_state.familias)}", styles['Normal']))
        familias_alto_riesgo = sum(1 for f in st.session_state.familias 
                                 if f["riesgos"]["social"]["nivel"] == "Alto" or 
                                 f["riesgos"]["sanitario"]["nivel"] == "Alto")
        story.append(Paragraph(f"Familias en Alto Riesgo: {familias_alto_riesgo}", styles['Normal']))
    
    story.append(Spacer(1, 20))
    
    # Diagn√≥stico
    if hasattr(st.session_state, 'diagnostico') and st.session_state.diagnostico:
        story.append(Paragraph("DIAGN√ìSTICO COMUNITARIO", styles['Heading2']))
        story.append(Spacer(1, 12))
        
        diagnostico = st.session_state.diagnostico
        story.append(Paragraph(f"Problema Principal: {diagnostico['problema_principal']}", styles['Normal']))
        story.append(Paragraph(f"Grupo Prioritario: {diagnostico['grupo_prioritario']}", styles['Normal']))
        story.append(Paragraph(f"Enfoque de Intervenci√≥n: {diagnostico['enfoque_intervencion']}", styles['Normal']))
        
        story.append(Spacer(1, 12))
        story.append(Paragraph("Estrategias Propuestas:", styles['Normal']))
        for estrategia in diagnostico['estrategias_propuestas']:
            story.append(Paragraph(f"‚Ä¢ {estrategia}", styles['Normal']))
    
    story.append(Spacer(1, 20))
    
    # Plan de intervenci√≥n
    if st.session_state.plan_intervencion:
        story.append(Paragraph("PLAN DE INTERVENCI√ìN", styles['Heading2']))
        story.append(Spacer(1, 12))
        
        story.append(Paragraph(f"Total de Actividades: {len(st.session_state.plan_intervencion)}", styles['Normal']))
        total_presupuesto = sum(a["presupuesto_estimado"] for a in st.session_state.plan_intervencion)
        story.append(Paragraph(f"Presupuesto Total: ${total_presupuesto:,}", styles['Normal']))
        
        story.append(Spacer(1, 12))
        story.append(Paragraph("Actividades Planificadas:", styles['Normal']))
        for actividad in st.session_state.plan_intervencion:
            story.append(Paragraph(f"‚Ä¢ {actividad['nombre']} ({actividad['tipo']})", styles['Normal']))
            story.append(Paragraph(f"  Objetivo: {actividad['objetivo_general']}", styles['Normal']))
            story.append(Paragraph(f"  Responsables: {', '.join(actividad['responsables'])}", styles['Normal']))
            story.append(Spacer(1, 6))
    
    # Fecha de generaci√≥n
    story.append(Spacer(1, 20))
    story.append(Paragraph(f"Fecha de generaci√≥n: {datetime.now().strftime('%Y-%m-%d %H:%M')}", styles['Normal']))
    
    doc.build(story)
    buffer.seek(0)
    return buffer

def mostrar_evaluacion():
    st.markdown("""
    <div class="section-header">
        <h2>üìä Evaluaci√≥n del Proceso</h2>
    </div>
    """, unsafe_allow_html=True)
    
    st.markdown("""
    ### üéì Evaluaci√≥n del Diagn√≥stico Comunitario
    
    Esta secci√≥n te permite evaluar el proceso completo de diagn√≥stico comunitario 
    y exportar los resultados para tu portafolio acad√©mico.
    
    **üí° Tip:** Tambi√©n puedes usar la "Evaluaci√≥n MAIS Oficial" para aplicar 
    las m√©tricas est√°ndar del Modelo de Atenci√≥n Integral en Salud.
    """)
    
    # Verificar completitud del proceso
    st.markdown("### ‚úÖ Verificaci√≥n de Completitud")
    
    pasos_completados = []
    pasos_pendientes = []
    
    # Verificar cada paso
    if st.session_state.sectores:
        pasos_completados.append("üó∫Ô∏è Sectorizaci√≥n del territorio")
    else:
        pasos_pendientes.append("üó∫Ô∏è Sectorizaci√≥n del territorio")
    
    if st.session_state.equipos:
        pasos_completados.append("üë• Formaci√≥n de equipos de cabecera")
    else:
        pasos_pendientes.append("üë• Formaci√≥n de equipos de cabecera")
    
    if st.session_state.familias:
        pasos_completados.append("üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Registro de familias")
    else:
        pasos_pendientes.append("üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Registro de familias")
    
    if hasattr(st.session_state, 'diagnostico') and st.session_state.diagnostico:
        pasos_completados.append("üîç Diagn√≥stico comunitario")
    else:
        pasos_pendientes.append("üîç Diagn√≥stico comunitario")
    
    if st.session_state.instituciones:
        pasos_completados.append("üåê Trabajo en red intersectorial")
    else:
        pasos_pendientes.append("üåê Trabajo en red intersectorial")
    
    if st.session_state.plan_intervencion:
        pasos_completados.append("üìã Plan de intervenci√≥n")
    else:
        pasos_pendientes.append("üìã Plan de intervenci√≥n")
    
    # Mostrar progreso
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("**Pasos Completados:**")
        for paso in pasos_completados:
            st.success(f"‚úÖ {paso}")
    
    with col2:
        st.markdown("**Pasos Pendientes:**")
        for paso in pasos_pendientes:
            st.error(f"‚ùå {paso}")
    
    # Calcular porcentaje de completitud
    total_pasos = 6
    porcentaje_completitud = (len(pasos_completados) / total_pasos) * 100
    
    st.markdown(f"### üìà Progreso General: {porcentaje_completitud:.1f}%")
    st.progress(porcentaje_completitud / 100)
    
    if porcentaje_completitud == 100:
        st.success("üéâ ¬°Felicitaciones! Has completado todo el proceso de diagn√≥stico comunitario.")
    elif porcentaje_completitud >= 80:
        st.warning("‚ö†Ô∏è Casi completo. Revisa los pasos pendientes para finalizar el proceso.")
    else:
        st.error("‚ùå Proceso incompleto. Completa los pasos pendientes para continuar.")
    
    # Resumen ejecutivo
    if st.session_state.sectores or st.session_state.familias:
        st.markdown("### üìä Resumen Ejecutivo")
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            if st.session_state.sectores:
                total_sectores = len(st.session_state.sectores)
                st.metric("Sectores", total_sectores)
            else:
                st.metric("Sectores", 0)
        
        with col2:
            if st.session_state.familias:
                total_familias = len(st.session_state.familias)
                st.metric("Familias", total_familias)
            else:
                st.metric("Familias", 0)
        
        with col3:
            if st.session_state.familias:
                familias_alto_riesgo = sum(1 for f in st.session_state.familias 
                                         if f["riesgos"]["social"]["nivel"] == "Alto" or 
                                         f["riesgos"]["sanitario"]["nivel"] == "Alto")
                st.metric("Alto Riesgo", familias_alto_riesgo)
            else:
                st.metric("Alto Riesgo", 0)
        
        with col4:
            if st.session_state.plan_intervencion:
                total_actividades = len(st.session_state.plan_intervencion)
                st.metric("Actividades", total_actividades)
            else:
                st.metric("Actividades", 0)
    
    # An√°lisis de calidad
    st.markdown("### üîç An√°lisis de Calidad del Diagn√≥stico")
    
    calidad_puntos = 0
    max_puntos = 0
    
    # Evaluar sectorizaci√≥n (M√©tricas MAIS - Comunidad)
    if st.session_state.sectores:
        max_puntos += 20
        if len(st.session_state.sectores) >= 2:
            calidad_puntos += 10  # Participaci√≥n comunitaria
        if any(s["vulnerabilidad"] in ["Alta", "Cr√≠tica"] for s in st.session_state.sectores):
            calidad_puntos += 10  # Coordinaci√≥n intersectorial
    
    # Evaluar registro de familias
    if st.session_state.familias:
        max_puntos += 30
        if len(st.session_state.familias) >= 5:
            calidad_puntos += 15
        if any(f["riesgos"]["social"]["nivel"] == "Alto" or f["riesgos"]["sanitario"]["nivel"] == "Alto" 
               for f in st.session_state.familias):
            calidad_puntos += 15
    
    # Evaluar diagn√≥stico
    if hasattr(st.session_state, 'diagnostico') and st.session_state.diagnostico:
        max_puntos += 25
        diagnostico = st.session_state.diagnostico
        if diagnostico["problema_principal"]:
            calidad_puntos += 10
        if diagnostico["estrategias_propuestas"]:
            calidad_puntos += 10
        if diagnostico["indicadores_evaluacion"]:
            calidad_puntos += 5
    
    # Evaluar plan de intervenci√≥n
    if st.session_state.plan_intervencion:
        max_puntos += 25
        if len(st.session_state.plan_intervencion) >= 2:
            calidad_puntos += 10
        if any("TENS" in a["responsables"] for a in st.session_state.plan_intervencion):
            calidad_puntos += 10
        if any(a["presupuesto_estimado"] > 0 for a in st.session_state.plan_intervencion):
            calidad_puntos += 5
    
    # Calcular puntaje final
    if max_puntos > 0:
        puntaje_final = (calidad_puntos / max_puntos) * 100
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown(f"**Puntaje de Calidad: {puntaje_final:.1f}/100**")
            st.progress(puntaje_final / 100)
        
        with col2:
            if puntaje_final >= 90:
                st.success("üèÜ **Excelente** - Diagn√≥stico de alta calidad")
            elif puntaje_final >= 75:
                st.success("üëç **Muy Bueno** - Diagn√≥stico de buena calidad")
            elif puntaje_final >= 60:
                st.warning("‚ö†Ô∏è **Bueno** - Diagn√≥stico aceptable")
            else:
                st.error("‚ùå **Necesita Mejora** - Revisa y completa el diagn√≥stico")
    
    # Autoevaluaci√≥n
    st.markdown("### ü§î Autoevaluaci√≥n del Proceso")
    
    with st.expander("üìù Formulario de Autoevaluaci√≥n", expanded=True):
        st.markdown("**Eval√∫a tu desempe√±o en cada aspecto del proceso:**")
        
        col1, col2 = st.columns(2)
        
        with col1:
            comprension_conceptos = st.slider(
                "Comprensi√≥n de conceptos MAIS",
                min_value=1, max_value=5, value=3,
                help="1=Muy baja, 5=Excelente"
            )
            
            aplicacion_metodologia = st.slider(
                "Aplicaci√≥n de metodolog√≠a",
                min_value=1, max_value=5, value=3,
                help="1=Muy baja, 5=Excelente"
            )
            
            analisis_datos = st.slider(
                "An√°lisis de datos",
                min_value=1, max_value=5, value=3,
                help="1=Muy baja, 5=Excelente"
            )
        
        with col2:
            formulacion_diagnostico = st.slider(
                "Formulaci√≥n del diagn√≥stico",
                min_value=1, max_value=5, value=3,
                help="1=Muy baja, 5=Excelente"
            )
            
            planificacion_intervencion = st.slider(
                "Planificaci√≥n de intervenci√≥n",
                min_value=1, max_value=5, value=3,
                help="1=Muy baja, 5=Excelente"
            )
            
            trabajo_equipo = st.slider(
                "Trabajo en equipo",
                min_value=1, max_value=5, value=3,
                help="1=Muy baja, 5=Excelente"
            )
        
        # Reflexi√≥n personal
        reflexion_personal = st.text_area(
            "Reflexi√≥n personal sobre el proceso de aprendizaje",
            placeholder="¬øQu√© aprendiste? ¬øQu√© fue lo m√°s desafiante? ¬øC√≥mo aplicar√≠as esto en la pr√°ctica?"
        )
        
        # Fortalezas y √°reas de mejora
        col1, col2 = st.columns(2)
        
        with col1:
            fortalezas = st.text_area(
                "Mis fortalezas en este proceso",
                placeholder="Identifica tus fortalezas..."
            )
        
        with col2:
            areas_mejora = st.text_area(
                "√Åreas de mejora",
                placeholder="Identifica √°reas donde puedes mejorar..."
            )
        
        # Guardar autoevaluaci√≥n
        if st.button("üíæ Guardar Autoevaluaci√≥n", type="primary"):
            autoevaluacion = {
                "comprension_conceptos": comprension_conceptos,
                "aplicacion_metodologia": aplicacion_metodologia,
                "analisis_datos": analisis_datos,
                "formulacion_diagnostico": formulacion_diagnostico,
                "planificacion_intervencion": planificacion_intervencion,
                "trabajo_equipo": trabajo_equipo,
                "reflexion_personal": reflexion_personal,
                "fortalezas": fortalezas,
                "areas_mejora": areas_mejora,
                "fecha_evaluacion": datetime.now().strftime("%Y-%m-%d %H:%M")
            }
            
            st.session_state.autoevaluacion = autoevaluacion
            st.success("‚úÖ Autoevaluaci√≥n guardada exitosamente!")
    
    # Mostrar autoevaluaci√≥n guardada
    if hasattr(st.session_state, 'autoevaluacion') and st.session_state.autoevaluacion:
        st.markdown("### üìã Autoevaluaci√≥n Guardada")
        
        autoevaluacion = st.session_state.autoevaluacion
        
        # Gr√°fico de radar
        categorias = ["Comprensi√≥n", "Metodolog√≠a", "An√°lisis", "Diagn√≥stico", "Planificaci√≥n", "Equipo"]
        valores = [
            autoevaluacion["comprension_conceptos"],
            autoevaluacion["aplicacion_metodologia"],
            autoevaluacion["analisis_datos"],
            autoevaluacion["formulacion_diagnostico"],
            autoevaluacion["planificacion_intervencion"],
            autoevaluacion["trabajo_equipo"]
        ]
        
        fig_radar = go.Figure()
        fig_radar.add_trace(go.Scatterpolar(
            r=valores,
            theta=categorias,
            fill='toself',
            name='Autoevaluaci√≥n'
        ))
        
        fig_radar.update_layout(
            polar=dict(
                radialaxis=dict(
                    visible=True,
                    range=[0, 5]
                )),
            showlegend=False,
            title="Perfil de Competencias"
        )
        
        st.plotly_chart(fig_radar, use_container_width=True)
        
        # Mostrar reflexi√≥n
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("**Reflexi√≥n Personal:**")
            st.info(autoevaluacion["reflexion_personal"])
        
        with col2:
            st.markdown("**Fortalezas:**")
            st.success(autoevaluacion["fortalezas"])
        
        st.markdown("**√Åreas de Mejora:**")
        st.warning(autoevaluacion["areas_mejora"])
    
    # Exportaci√≥n de datos
    st.markdown("### üì§ Exportaci√≥n de Datos")
    
    col1, col2 = st.columns(2)
    
    with col1:
        # Exportar a Excel
        if st.session_state.sectores or st.session_state.familias:
            # Crear Excel con m√∫ltiples hojas
            output = io.BytesIO()
            with pd.ExcelWriter(output, engine='openpyxl') as writer:
                # Hoja de sectores
                if st.session_state.sectores:
                    df_sectores = pd.DataFrame(st.session_state.sectores)
                    df_sectores.to_excel(writer, sheet_name='Sectores', index=False)
                
                # Hoja de familias
                if st.session_state.familias:
                    familias_data = []
                    for familia in st.session_state.familias:
                        familias_data.append({
                            "Sector": familia["sector"],
                            "Apellido": familia["apellido"],
                            "Integrantes": familia["num_integrantes"],
                            "Riesgo Social": familia["riesgos"]["social"]["nivel"],
                            "Riesgo Sanitario": familia["riesgos"]["sanitario"]["nivel"],
                            "Hacinamiento": familia["vivienda"]["hacinamiento"],
                            "Violencia Intrafamiliar": familia["salud"]["violencia_intrafamiliar"],
                            "Consumo Drogas": familia["salud"]["consumo_drogas"]
                        })
                    df_familias = pd.DataFrame(familias_data)
                    df_familias.to_excel(writer, sheet_name='Familias', index=False)
                
                # Hoja de plan de intervenci√≥n
                if st.session_state.plan_intervencion:
                    plan_data = []
                    for actividad in st.session_state.plan_intervencion:
                        plan_data.append({
                            "Actividad": actividad["nombre"],
                            "Tipo": actividad["tipo"],
                            "Objetivo": actividad["objetivo_general"],
                            "Responsables": ", ".join(actividad["responsables"]),
                            "Presupuesto": actividad["presupuesto_estimado"],
                            "Fecha Inicio": actividad["cronograma"]["fecha_inicio"],
                            "Fecha Fin": actividad["cronograma"]["fecha_fin"]
                        })
                    df_plan = pd.DataFrame(plan_data)
                    df_plan.to_excel(writer, sheet_name='Plan_Intervencion', index=False)
            
            output.seek(0)
            st.download_button(
                label="üìä Descargar Excel",
                data=output.getvalue(),
                file_name=f"diagnostico_comunitario_{datetime.now().strftime('%Y%m%d')}.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            )
    
    with col2:
        # Exportar a PDF
        if st.session_state.sectores or st.session_state.familias:
            pdf_buffer = generar_pdf()
            st.download_button(
                label="üìÑ Descargar PDF",
                data=pdf_buffer.getvalue(),
                file_name=f"diagnostico_comunitario_{datetime.now().strftime('%Y%m%d')}.pdf",
                mime="application/pdf"
            )
    
    # Exportar datos JSON
    if st.session_state.sectores or st.session_state.familias:
        datos_completos = {
            "sectores": st.session_state.sectores,
            "equipos": st.session_state.equipos,
            "familias": st.session_state.familias,
            "instituciones": st.session_state.instituciones,
            "plan_intervencion": st.session_state.plan_intervencion,
            "diagnostico": st.session_state.diagnostico if hasattr(st.session_state, 'diagnostico') else None,
            "autoevaluacion": st.session_state.autoevaluacion if hasattr(st.session_state, 'autoevaluacion') else None,
            "fecha_exportacion": datetime.now().strftime("%Y-%m-%d %H:%M")
        }
        
        json_data = json.dumps(datos_completos, indent=2, ensure_ascii=False)
        st.download_button(
            label="üíæ Descargar JSON",
            data=json_data,
            file_name=f"datos_completos_{datetime.now().strftime('%Y%m%d')}.json",
            mime="application/json"
        )
    
    # Recomendaciones finales
    st.markdown("### üéØ Recomendaciones Finales")
    
    if porcentaje_completitud < 100:
        st.warning("**Para completar el proceso:**")
        for paso in pasos_pendientes:
            st.write(f"‚Ä¢ {paso}")
    
    if st.session_state.familias:
        familias_alto_riesgo = sum(1 for f in st.session_state.familias 
                                 if f["riesgos"]["social"]["nivel"] == "Alto" or 
                                 f["riesgos"]["sanitario"]["nivel"] == "Alto")
        
        if familias_alto_riesgo > 0:
            st.info(f"‚Ä¢ Priorizar la atenci√≥n de {familias_alto_riesgo} familias en alto riesgo")
        
        if sum(1 for f in st.session_state.familias if f["salud"]["violencia_intrafamiliar"]) > 0:
            st.error("‚Ä¢ Implementar protocolos de detecci√≥n y derivaci√≥n de violencia intrafamiliar")
    
    if st.session_state.plan_intervencion:
        if len(st.session_state.plan_intervencion) < 3:
            st.warning("‚Ä¢ Considerar agregar m√°s actividades al plan de intervenci√≥n")
        
        if not any("TENS" in a["responsables"] for a in st.session_state.plan_intervencion):
            st.info("‚Ä¢ Incluir TENS como responsables en las actividades")
    
    st.success("üéì **¬°Has completado exitosamente el simulador de diagn√≥stico comunitario!**")
    st.info("Este proceso te ha preparado para realizar diagn√≥sticos comunitarios reales en el contexto de APS.") 
    
    # Footer con informaci√≥n de autor√≠a
    st.markdown("---")
    st.markdown("""
    <div style="text-align: center; padding: 15px; background-color: #f0f2f6; border-radius: 8px; margin-top: 20px;">
        <p style="color: #666; font-size: 12px; margin: 0;">
            Aplicaci√≥n educativa desarrollada por Ricardo Delannoy Suazo para formaci√≥n en diagn√≥stico comunitario en salud familiar.<br>
            ¬© 2025. Todos los derechos reservados.
        </p>
    </div>
    """, unsafe_allow_html=True) 