import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, timedelta
import json

def mostrar_educacion_promocion_salud():
    """
    M√≥dulo de Educaci√≥n para la Salud y Promoci√≥n de la Salud
    Incluye: Objetivos SMART, Modelo de Creencias en Salud, Etapas del Ciclo de Vida
    """
    
    st.title("üìö Educaci√≥n para la Salud y Promoci√≥n de la Salud")
    st.markdown("### Estrategias Educativas y Promocionales en APS - Enfoque TENS")
    
    # Inicializar session state
    if 'educacion_promocion_salud' not in st.session_state:
        st.session_state.educacion_promocion_salud = {
            'objetivos_smart': [],
            'intervenciones_educativas': [],
            'evaluacion_creencias': [],
            'programas_ciclo_vida': [],
            'indicadores_educacion': []
        }
    
    # Pesta√±as principales
    tab1, tab2, tab3, tab4, tab5 = st.tabs([
        "üéØ Objetivos SMART", 
        "üìñ Intervenciones Educativas",
        "üß† Modelo de Creencias en Salud", 
        "üë∂ Etapas del Ciclo de Vida",
        "üìä Indicadores"
    ])
    
    with tab1:
        mostrar_objetivos_smart()
    
    with tab2:
        mostrar_intervenciones_educativas()
    
    with tab3:
        mostrar_modelo_creencias()
    
    with tab4:
        mostrar_etapas_ciclo_vida()
    
    with tab5:
        mostrar_indicadores_educacion()

def mostrar_objetivos_smart():
    """Formulaci√≥n de objetivos SMART para educaci√≥n en salud"""
    
    st.header("üéØ Formulaci√≥n de Objetivos SMART")
    st.markdown("**Espec√≠ficos, Medibles, Alcanzables, Relevantes y con Tiempo definido**")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("üìã Nuevo Objetivo SMART")
        
        titulo = st.text_input("T√≠tulo del Objetivo:", key="smart_titulo")
        
        # Componentes SMART
        st.markdown("#### Componentes SMART:")
        
        especifico = st.text_area("**S - Espec√≠fico:** ¬øQu√© se quiere lograr exactamente?", key="smart_especifico")
        medible = st.text_area("**M - Medible:** ¬øC√≥mo se medir√° el progreso?", key="smart_medible")
        alcanzable = st.text_area("**A - Alcanzable:** ¬øEs realista con los recursos disponibles?", key="smart_alcanzable")
        relevante = st.text_area("**R - Relevante:** ¬øPor qu√© es importante este objetivo?", key="smart_relevante")
        tiempo = st.text_area("**T - Tiempo:** ¬øCu√°ndo se lograr√°?", key="smart_tiempo")
        
        # Categor√≠a del objetivo
        categoria = st.selectbox(
            "Categor√≠a:",
            [
                "Prevenci√≥n Primaria", "Prevenci√≥n Secundaria", "Prevenci√≥n Terciaria",
                "Promoci√≥n de la Salud", "Educaci√≥n Sanitaria", "Empoderamiento Comunitario",
                "Cambio de Comportamiento", "Mejora de Acceso", "Calidad de Vida"
            ],
            key="smart_categoria"
        )
        
        # Poblaci√≥n objetivo
        poblacion = st.multiselect(
            "Poblaci√≥n Objetivo:",
            [
                "Ni√±os (0-5 a√±os)", "Escolares (6-12 a√±os)", "Adolescentes (13-17 a√±os)",
                "Adultos J√≥venes (18-29 a√±os)", "Adultos (30-59 a√±os)", "Adultos Mayores (60+)",
                "Mujeres Embarazadas", "Familias", "Comunidad General"
            ],
            key="smart_poblacion"
        )
        
        if st.button("üíæ Guardar Objetivo SMART", key="guardar_smart"):
            if titulo and especifico and medible and alcanzable and relevante and tiempo:
                objetivo = {
                    'id': len(st.session_state.educacion_promocion_salud['objetivos_smart']) + 1,
                    'titulo': titulo,
                    'especifico': especifico,
                    'medible': medible,
                    'alcanzable': alcanzable,
                    'relevante': relevante,
                    'tiempo': tiempo,
                    'categoria': categoria,
                    'poblacion': poblacion,
                    'fecha_creacion': datetime.now().strftime("%Y-%m-%d %H:%M"),
                    'estado': 'En Progreso'
                }
                
                st.session_state.educacion_promocion_salud['objetivos_smart'].append(objetivo)
                st.success("‚úÖ Objetivo SMART guardado exitosamente")
                
                # Limpiar campos
                st.rerun()
            else:
                st.error("‚ùå Por favor completa todos los campos obligatorios")
    
    with col2:
        st.subheader("üìä Objetivos SMART Registrados")
        
        if st.session_state.educacion_promocion_salud['objetivos_smart']:
            for objetivo in st.session_state.educacion_promocion_salud['objetivos_smart']:
                with st.expander(f"üéØ {objetivo['titulo']} - {objetivo['categoria']}", expanded=False):
                    st.write(f"**Espec√≠fico:** {objetivo['especifico']}")
                    st.write(f"**Medible:** {objetivo['medible']}")
                    st.write(f"**Alcanzable:** {objetivo['alcanzable']}")
                    st.write(f"**Relevante:** {objetivo['relevante']}")
                    st.write(f"**Tiempo:** {objetivo['tiempo']}")
                    st.write(f"**Poblaci√≥n:** {', '.join(objetivo['poblacion'])}")
                    st.write(f"**Estado:** {objetivo['estado']}")
                    st.write(f"**Fecha:** {objetivo['fecha_creacion']}")
                    
                    # Cambiar estado
                    nuevo_estado = st.selectbox(
                        "Cambiar estado:",
                        ["En Progreso", "Completado", "Pendiente", "Cancelado"],
                        index=["En Progreso", "Completado", "Pendiente", "Cancelado"].index(objetivo['estado']),
                        key=f"estado_{objetivo['id']}"
                    )
                    if nuevo_estado != objetivo['estado']:
                        objetivo['estado'] = nuevo_estado
                        st.success(f"Estado actualizado a: {nuevo_estado}")
        else:
            st.info("üìù No hay objetivos SMART registrados. Crea el primero en el panel izquierdo.")

def mostrar_intervenciones_educativas():
    """Dise√±o e implementaci√≥n de intervenciones educativas"""
    
    st.header("üìñ Intervenciones Educativas")
    st.markdown("**Dise√±o, implementaci√≥n y evaluaci√≥n de estrategias educativas**")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("üé® Nueva Intervenci√≥n Educativa")
        
        nombre = st.text_input("Nombre de la Intervenci√≥n:", key="interv_nombre")
        
        # Tipo de intervenci√≥n
        tipo_intervencion = st.selectbox(
            "Tipo de Intervenci√≥n:",
            [
                "Educaci√≥n Individual", "Educaci√≥n Grupal", "Talleres Comunitarios",
                "Material Educativo", "Campa√±as de Comunicaci√≥n", "Tecnolog√≠as Digitales",
                "Intervenci√≥n Familiar", "Educaci√≥n en Escuelas", "Capacitaci√≥n de L√≠deres"
            ],
            key="interv_tipo"
        )
        
        # Metodolog√≠a educativa
        metodologia = st.multiselect(
            "Metodolog√≠a Educativa:",
            [
                "Exposici√≥n Magistral", "Discusi√≥n Grupal", "Role Playing",
                "Casos Cl√≠nicos", "Demostraci√≥n Pr√°ctica", "Aprendizaje Basado en Problemas",
                "Educaci√≥n Entre Pares", "Tecnolog√≠as Interactivas", "Material Audiovisual"
            ],
            key="interv_metodologia"
        )
        
        # Contenido educativo
        contenido = st.text_area("Contenido Educativo:", key="interv_contenido")
        
        # Objetivos de aprendizaje
        objetivos = st.text_area("Objetivos de Aprendizaje:", key="interv_objetivos")
        
        # Duraci√≥n y frecuencia
        duracion = st.text_input("Duraci√≥n:", placeholder="Ej: 2 horas", key="interv_duracion")
        frecuencia = st.selectbox(
            "Frecuencia:",
            ["√önica", "Semanal", "Quincenal", "Mensual", "Trimestral", "Semestral"],
            key="interv_frecuencia"
        )
        
        # Recursos necesarios
        recursos = st.text_area("Recursos Necesarios:", key="interv_recursos")
        
        if st.button("üíæ Guardar Intervenci√≥n", key="guardar_intervencion"):
            if nombre and contenido and objetivos:
                intervencion = {
                    'id': len(st.session_state.educacion_promocion_salud['intervenciones_educativas']) + 1,
                    'nombre': nombre,
                    'tipo': tipo_intervencion,
                    'metodologia': metodologia,
                    'contenido': contenido,
                    'objetivos': objetivos,
                    'duracion': duracion,
                    'frecuencia': frecuencia,
                    'recursos': recursos,
                    'fecha_creacion': datetime.now().strftime("%Y-%m-%d %H:%M"),
                    'estado': 'Planificada'
                }
                
                st.session_state.educacion_promocion_salud['intervenciones_educativas'].append(intervencion)
                st.success("‚úÖ Intervenci√≥n educativa guardada exitosamente")
                st.rerun()
            else:
                st.error("‚ùå Por favor completa los campos obligatorios")
    
    with col2:
        st.subheader("üìã Intervenciones Registradas")
        
        if st.session_state.educacion_promocion_salud['intervenciones_educativas']:
            for interv in st.session_state.educacion_promocion_salud['intervenciones_educativas']:
                with st.expander(f"üìñ {interv['nombre']} - {interv['tipo']}", expanded=False):
                    st.write(f"**Metodolog√≠a:** {', '.join(interv['metodologia'])}")
                    st.write(f"**Duraci√≥n:** {interv['duracion']}")
                    st.write(f"**Frecuencia:** {interv['frecuencia']}")
                    st.write(f"**Objetivos:** {interv['objetivos']}")
                    st.write(f"**Contenido:** {interv['contenido']}")
                    st.write(f"**Recursos:** {interv['recursos']}")
                    st.write(f"**Estado:** {interv['estado']}")
                    
                    # Cambiar estado
                    nuevo_estado = st.selectbox(
                        "Cambiar estado:",
                        ["Planificada", "En Ejecuci√≥n", "Completada", "Evaluada"],
                        index=["Planificada", "En Ejecuci√≥n", "Completada", "Evaluada"].index(interv['estado']),
                        key=f"estado_interv_{interv['id']}"
                    )
                    if nuevo_estado != interv['estado']:
                        interv['estado'] = nuevo_estado
                        st.success(f"Estado actualizado a: {nuevo_estado}")
        else:
            st.info("üìù No hay intervenciones registradas. Crea la primera en el panel izquierdo.")

def mostrar_modelo_creencias():
    """Evaluaci√≥n basada en el Modelo de Creencias en Salud"""
    
    st.header("üß† Modelo de Creencias en Salud")
    st.markdown("**Evaluaci√≥n de susceptibilidad, severidad, beneficios y barreras**")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("üîç Evaluaci√≥n de Creencias")
        
        # Seleccionar poblaci√≥n
        poblacion_evaluacion = st.selectbox(
            "Poblaci√≥n a Evaluar:",
            [
                "Familias con ni√±os peque√±os", "Adultos con enfermedades cr√≥nicas",
                "Mujeres embarazadas", "Adultos mayores", "Adolescentes",
                "Trabajadores", "Comunidad general"
            ],
            key="creencias_poblacion"
        )
        
        # Problema de salud
        problema_salud = st.text_input("Problema de Salud:", key="creencias_problema")
        
        st.markdown("#### Componentes del Modelo de Creencias:")
        
        # Susceptibilidad percibida
        susceptibilidad = st.slider(
            "**Susceptibilidad Percibida:** ¬øQu√© tan vulnerable se siente la poblaci√≥n?",
            1, 10, 5, key="creencias_susceptibilidad"
        )
        
        # Severidad percibida
        severidad = st.slider(
            "**Severidad Percibida:** ¬øQu√© tan grave considera el problema?",
            1, 10, 5, key="creencias_severidad"
        )
        
        # Beneficios percibidos
        beneficios = st.slider(
            "**Beneficios Percibidos:** ¬øQu√© tan beneficiosa considera la acci√≥n preventiva?",
            1, 10, 5, key="creencias_beneficios"
        )
        
        # Barreras percibidas
        barreras = st.slider(
            "**Barreras Percibidas:** ¬øQu√© tan dif√≠cil considera realizar la acci√≥n?",
            1, 10, 5, key="creencias_barreras"
        )
        
        # Se√±ales para la acci√≥n
        senales = st.text_area("**Se√±ales para la Acci√≥n:** ¬øQu√© factores motivan la acci√≥n?", key="creencias_senales")
        
        # Autoeficacia
        autoeficacia = st.slider(
            "**Autoeficacia:** ¬øQu√© tan capaz se siente de realizar la acci√≥n?",
            1, 10, 5, key="creencias_autoeficacia"
        )
        
        # Recomendaciones basadas en el modelo
        recomendaciones = st.text_area("**Recomendaciones:** Estrategias basadas en el an√°lisis", key="creencias_recomendaciones")
        
        if st.button("üíæ Guardar Evaluaci√≥n", key="guardar_creencias"):
            if problema_salud and senales and recomendaciones:
                evaluacion = {
                    'id': len(st.session_state.educacion_promocion_salud['evaluacion_creencias']) + 1,
                    'poblacion': poblacion_evaluacion,
                    'problema_salud': problema_salud,
                    'susceptibilidad': susceptibilidad,
                    'severidad': severidad,
                    'beneficios': beneficios,
                    'barreras': barreras,
                    'senales': senales,
                    'autoeficacia': autoeficacia,
                    'recomendaciones': recomendaciones,
                    'fecha_evaluacion': datetime.now().strftime("%Y-%m-%d %H:%M")
                }
                
                st.session_state.educacion_promocion_salud['evaluacion_creencias'].append(evaluacion)
                st.success("‚úÖ Evaluaci√≥n de creencias guardada exitosamente")
                st.rerun()
            else:
                st.error("‚ùå Por favor completa los campos obligatorios")
    
    with col2:
        st.subheader("üìä An√°lisis de Creencias")
        
        if st.session_state.educacion_promocion_salud['evaluacion_creencias']:
            # Gr√°fico de radar para la √∫ltima evaluaci√≥n
            ultima_eval = st.session_state.educacion_promocion_salud['evaluacion_creencias'][-1]
            
            fig = go.Figure()
            
            fig.add_trace(go.Scatterpolar(
                r=[ultima_eval['susceptibilidad'], ultima_eval['severidad'], 
                   ultima_eval['beneficios'], ultima_eval['barreras'], ultima_eval['autoeficacia']],
                theta=['Susceptibilidad', 'Severidad', 'Beneficios', 'Barreras', 'Autoeficacia'],
                fill='toself',
                name='Percepci√≥n Actual'
            ))
            
            fig.update_layout(
                polar=dict(
                    radialaxis=dict(
                        visible=True,
                        range=[0, 10]
                    )),
                showlegend=True,
                title=f"An√°lisis de Creencias: {ultima_eval['problema_salud']}"
            )
            
            st.plotly_chart(fig, use_container_width=True)
            
            # Lista de evaluaciones
            st.markdown("#### Evaluaciones Realizadas:")
            for eval in st.session_state.educacion_promocion_salud['evaluacion_creencias']:
                with st.expander(f"üîç {eval['problema_salud']} - {eval['poblacion']}", expanded=False):
                    st.write(f"**Susceptibilidad:** {eval['susceptibilidad']}/10")
                    st.write(f"**Severidad:** {eval['severidad']}/10")
                    st.write(f"**Beneficios:** {eval['beneficios']}/10")
                    st.write(f"**Barreras:** {eval['barreras']}/10")
                    st.write(f"**Autoeficacia:** {eval['autoeficacia']}/10")
                    st.write(f"**Se√±ales:** {eval['senales']}")
                    st.write(f"**Recomendaciones:** {eval['recomendaciones']}")
        else:
            st.info("üìù No hay evaluaciones de creencias registradas. Realiza la primera en el panel izquierdo.")

def mostrar_etapas_ciclo_vida():
    """Educaci√≥n en salud seg√∫n etapas del ciclo de vida"""
    
    st.header("üë∂ Educaci√≥n en Salud por Etapas del Ciclo de Vida")
    st.markdown("**Intervenciones educativas espec√≠ficas para cada etapa**")
    
    # Seleccionar etapa del ciclo de vida
    etapa = st.selectbox(
        "Seleccionar Etapa del Ciclo de Vida:",
        [
            "Embarazo y Parto",
            "Primera Infancia (0-2 a√±os)",
            "Edad Preescolar (3-5 a√±os)",
            "Edad Escolar (6-12 a√±os)",
            "Adolescencia (13-17 a√±os)",
            "Adultez Joven (18-29 a√±os)",
            "Adultez Media (30-59 a√±os)",
            "Adultez Mayor (60+ a√±os)"
        ],
        key="ciclo_vida_etapa"
    )
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader(f"üìö Programa Educativo - {etapa}")
        
        # Contenidos espec√≠ficos por etapa
        contenidos_etapa = {
            "Embarazo y Parto": [
                "Cuidados prenatales", "Nutrici√≥n durante el embarazo", "Preparaci√≥n para el parto",
                "Lactancia materna", "Cuidados del reci√©n nacido", "Salud mental perinatal"
            ],
            "Primera Infancia (0-2 a√±os)": [
                "Desarrollo psicomotor", "Vacunaci√≥n", "Alimentaci√≥n complementaria",
                "Prevenci√≥n de accidentes", "Estimulaci√≥n temprana", "Control de crecimiento"
            ],
            "Edad Preescolar (3-5 a√±os)": [
                "Desarrollo social y emocional", "H√°bitos de higiene", "Alimentaci√≥n saludable",
                "Prevenci√≥n de accidentes", "Desarrollo del lenguaje", "Actividad f√≠sica"
            ],
            "Edad Escolar (6-12 a√±os)": [
                "Salud bucal", "Nutrici√≥n escolar", "Actividad f√≠sica y deportes",
                "Prevenci√≥n de bullying", "Uso seguro de internet", "H√°bitos de estudio"
            ],
            "Adolescencia (13-17 a√±os)": [
                "Salud sexual y reproductiva", "Prevenci√≥n de adicciones", "Salud mental",
                "Alimentaci√≥n y trastornos alimentarios", "Actividad f√≠sica", "Proyecto de vida"
            ],
            "Adultez Joven (18-29 a√±os)": [
                "Planificaci√≥n familiar", "Prevenci√≥n de ITS", "Salud ocupacional",
                "Estilos de vida saludables", "Prevenci√≥n de violencia", "Desarrollo profesional"
            ],
            "Adultez Media (30-59 a√±os)": [
                "Prevenci√≥n de enfermedades cr√≥nicas", "Salud cardiovascular", "C√°ncer",
                "Salud mental y estr√©s", "Equilibrio trabajo-familia", "Envejecimiento saludable"
            ],
            "Adultez Mayor (60+ a√±os)": [
                "Envejecimiento activo", "Prevenci√≥n de ca√≠das", "Salud mental",
                "Nutrici√≥n en el adulto mayor", "Actividad f√≠sica adaptada", "Cuidados paliativos"
            ]
        }
        
        # Mostrar contenidos espec√≠ficos
        st.markdown("#### Contenidos Educativos Espec√≠ficos:")
        for contenido in contenidos_etapa[etapa]:
            st.write(f"‚Ä¢ {contenido}")
        
        # Nuevo programa educativo
        st.markdown("#### Crear Nuevo Programa:")
        
        nombre_programa = st.text_input("Nombre del Programa:", key="programa_nombre")
        objetivo_programa = st.text_area("Objetivo del Programa:", key="programa_objetivo")
        metodologia_programa = st.multiselect(
            "Metodolog√≠a:",
            [
                "Talleres grupales", "Educaci√≥n individual", "Material educativo",
                "Tecnolog√≠as digitales", "Actividades pr√°cticas", "Educaci√≥n entre pares"
            ],
            key="programa_metodologia"
        )
        duracion_programa = st.text_input("Duraci√≥n:", key="programa_duracion")
        recursos_programa = st.text_area("Recursos Necesarios:", key="programa_recursos")
        
        if st.button("üíæ Guardar Programa", key="guardar_programa"):
            if nombre_programa and objetivo_programa:
                programa = {
                    'id': len(st.session_state.educacion_promocion_salud['programas_ciclo_vida']) + 1,
                    'etapa': etapa,
                    'nombre': nombre_programa,
                    'objetivo': objetivo_programa,
                    'metodologia': metodologia_programa,
                    'duracion': duracion_programa,
                    'recursos': recursos_programa,
                    'fecha_creacion': datetime.now().strftime("%Y-%m-%d %H:%M"),
                    'estado': 'Planificado'
                }
                
                st.session_state.educacion_promocion_salud['programas_ciclo_vida'].append(programa)
                st.success("‚úÖ Programa educativo guardado exitosamente")
                st.rerun()
            else:
                st.error("‚ùå Por favor completa los campos obligatorios")
    
    with col2:
        st.subheader("üìã Programas por Etapa")
        
        # Filtrar programas por etapa seleccionada
        programas_etapa = [p for p in st.session_state.educacion_promocion_salud['programas_ciclo_vida'] 
                          if p['etapa'] == etapa]
        
        if programas_etapa:
            for programa in programas_etapa:
                with st.expander(f"üìö {programa['nombre']}", expanded=False):
                    st.write(f"**Objetivo:** {programa['objetivo']}")
                    st.write(f"**Metodolog√≠a:** {', '.join(programa['metodologia'])}")
                    st.write(f"**Duraci√≥n:** {programa['duracion']}")
                    st.write(f"**Recursos:** {programa['recursos']}")
                    st.write(f"**Estado:** {programa['estado']}")
                    
                    # Cambiar estado
                    nuevo_estado = st.selectbox(
                        "Cambiar estado:",
                        ["Planificado", "En Ejecuci√≥n", "Completado", "Evaluado"],
                        index=["Planificado", "En Ejecuci√≥n", "Completado", "Evaluado"].index(programa['estado']),
                        key=f"estado_programa_{programa['id']}"
                    )
                    if nuevo_estado != programa['estado']:
                        programa['estado'] = nuevo_estado
                        st.success(f"Estado actualizado a: {nuevo_estado}")
        else:
            st.info(f"üìù No hay programas registrados para {etapa}. Crea el primero en el panel izquierdo.")

def mostrar_indicadores_educacion():
    """Indicadores de evaluaci√≥n de programas educativos"""
    
    st.header("üìä Indicadores de Educaci√≥n en Salud")
    st.markdown("**Evaluaci√≥n y seguimiento de programas educativos**")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("üìà Nuevo Indicador")
        
        nombre_indicador = st.text_input("Nombre del Indicador:", key="indicador_nombre")
        
        tipo_indicador = st.selectbox(
            "Tipo de Indicador:",
            [
                "Cobertura", "Conocimientos", "Actitudes", "Pr√°cticas",
                "Satisfacci√≥n", "Retenci√≥n", "Aplicaci√≥n", "Impacto"
            ],
            key="indicador_tipo"
        )
        
        descripcion = st.text_area("Descripci√≥n:", key="indicador_descripcion")
        
        metodo_medicion = st.text_area("M√©todo de Medici√≥n:", key="indicador_metodo")
        
        meta = st.number_input("Meta (%):", min_value=0, max_value=100, value=80, key="indicador_meta")
        
        valor_actual = st.number_input("Valor Actual (%):", min_value=0, max_value=100, value=0, key="indicador_actual")
        
        programa_asociado = st.selectbox(
            "Programa Asociado:",
            ["Todos"] + [p['nombre'] for p in st.session_state.educacion_promocion_salud['programas_ciclo_vida']],
            key="indicador_programa"
        )
        
        if st.button("üíæ Guardar Indicador", key="guardar_indicador"):
            if nombre_indicador and descripcion and metodo_medicion:
                indicador = {
                    'id': len(st.session_state.educacion_promocion_salud['indicadores_educacion']) + 1,
                    'nombre': nombre_indicador,
                    'tipo': tipo_indicador,
                    'descripcion': descripcion,
                    'metodo_medicion': metodo_medicion,
                    'meta': meta,
                    'valor_actual': valor_actual,
                    'programa_asociado': programa_asociado,
                    'fecha_creacion': datetime.now().strftime("%Y-%m-%d %H:%M")
                }
                
                st.session_state.educacion_promocion_salud['indicadores_educacion'].append(indicador)
                st.success("‚úÖ Indicador guardado exitosamente")
                st.rerun()
            else:
                st.error("‚ùå Por favor completa los campos obligatorios")
    
    with col2:
        st.subheader("üìä Dashboard de Indicadores")
        
        if st.session_state.educacion_promocion_salud['indicadores_educacion']:
            # Gr√°fico de barras para indicadores
            df_indicadores = pd.DataFrame(st.session_state.educacion_promocion_salud['indicadores_educacion'])
            
            fig = go.Figure()
            
            fig.add_trace(go.Bar(
                x=df_indicadores['nombre'],
                y=df_indicadores['valor_actual'],
                name='Valor Actual',
                marker_color='lightblue'
            ))
            
            fig.add_trace(go.Bar(
                x=df_indicadores['nombre'],
                y=df_indicadores['meta'],
                name='Meta',
                marker_color='orange'
            ))
            
            fig.update_layout(
                title="Progreso de Indicadores",
                xaxis_title="Indicadores",
                yaxis_title="Porcentaje (%)",
                barmode='group'
            )
            
            st.plotly_chart(fig, use_container_width=True)
            
            # Resumen de indicadores
            st.markdown("#### Resumen:")
            total_indicadores = len(st.session_state.educacion_promocion_salud['indicadores_educacion'])
            indicadores_cumplidos = len([i for i in st.session_state.educacion_promocion_salud['indicadores_educacion'] 
                                       if i['valor_actual'] >= i['meta']])
            
            st.metric("Total de Indicadores", total_indicadores)
            st.metric("Indicadores Cumplidos", indicadores_cumplidos)
            st.metric("Porcentaje de Cumplimiento", f"{(indicadores_cumplidos/total_indicadores)*100:.1f}%" if total_indicadores > 0 else "0%")
        else:
            st.info("üìù No hay indicadores registrados. Crea el primero en el panel izquierdo.")
    
    # Exportar datos
    if st.session_state.educacion_promocion_salud['indicadores_educacion']:
        st.markdown("---")
        st.subheader("üì§ Exportar Datos")
        
        if st.button("üìä Exportar a JSON"):
            st.json(st.session_state.educacion_promocion_salud) 