import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime
from sistema_inteligente import analizar_datos_comunidad

def mostrar_diagnostico():
    st.markdown("""
    <div class="section-header">
        <h2>üîç Diagn√≥stico Familiar y Comunitario</h2>
    </div>
    """, unsafe_allow_html=True)
    
    st.markdown("""
    ### üìã ¬øQu√© es el Diagn√≥stico Comunitario?
    
    El diagn√≥stico comunitario es el proceso de an√°lisis e interpretaci√≥n de la informaci√≥n 
    recopilada sobre las familias y la comunidad. Permite identificar problemas prioritarios, 
    recursos disponibles y oportunidades de intervenci√≥n.
    """)
    
    # Verificar si hay datos suficientes
    if not st.session_state.sectores:
        st.warning("‚ö†Ô∏è No hay sectores registrados. Completa la sectorizaci√≥n primero.")
        return
    
    if not st.session_state.familias:
        st.warning("‚ö†Ô∏è No hay familias registradas. Completa el registro familiar primero.")
        return
    
    # Resumen ejecutivo
    st.markdown("### üìä Resumen Ejecutivo del Diagn√≥stico")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        total_sectores = len(st.session_state.sectores)
        st.metric("Sectores", total_sectores)
    
    with col2:
        total_familias = len(st.session_state.familias)
        st.metric("Familias Registradas", total_familias)
    
    with col3:
        total_poblacion = sum(s["poblacion_total"] for s in st.session_state.sectores)
        st.metric("Poblaci√≥n Total", f"{total_poblacion:,}")
    
    with col4:
        familias_alto_riesgo = sum(1 for f in st.session_state.familias 
                                 if f["riesgos"]["social"]["nivel"] == "Alto" or 
                                 f["riesgos"]["sanitario"]["nivel"] == "Alto")
        st.metric("Familias Alto Riesgo", familias_alto_riesgo)
    
    # An√°lisis por sectores
    st.markdown("### üó∫Ô∏è An√°lisis por Sectores")
    
    diagnostico_data = []
    for sector in st.session_state.sectores:
        sector_nombre = sector["nombre"]
        familias_sector = [f for f in st.session_state.familias if f["sector"] == sector_nombre]
        
        if familias_sector:
            # Calcular estad√≠sticas del sector
            total_familias_sector = len(familias_sector)
            familias_alto_riesgo_sector = sum(1 for f in familias_sector 
                                            if f["riesgos"]["social"]["nivel"] == "Alto" or 
                                            f["riesgos"]["sanitario"]["nivel"] == "Alto")
            
            # Problemas m√°s frecuentes
            problemas_frecuentes = []
            for familia in familias_sector:
                if familia["vivienda"]["hacinamiento"] == "Alto":
                    problemas_frecuentes.append("Hacinamiento")
                if familia["salud"]["violencia_intrafamiliar"]:
                    problemas_frecuentes.append("Violencia Intrafamiliar")
                if familia["salud"]["consumo_drogas"]:
                    problemas_frecuentes.append("Consumo de Drogas")
                if familia["salud"]["embarazo_adolescente"]:
                    problemas_frecuentes.append("Embarazo Adolescente")
            
            # Contar problemas
            from collections import Counter
            problemas_count = Counter(problemas_frecuentes)
            problema_principal = problemas_count.most_common(1)[0][0] if problemas_count else "Ninguno"
            
            diagnostico_data.append({
                "Sector": sector_nombre,
                "Total Familias": total_familias_sector,
                "Familias Alto Riesgo": familias_alto_riesgo_sector,
                "Porcentaje Alto Riesgo": (familias_alto_riesgo_sector / total_familias_sector) * 100,
                "Problema Principal": problema_principal,
                "Vulnerabilidad": sector["vulnerabilidad"],
                "Tipo Territorio": sector["tipo_territorio"]
            })
    
    if diagnostico_data:
        df_diagnostico = pd.DataFrame(diagnostico_data)
        
        # Mostrar tabla de diagn√≥stico
        st.dataframe(df_diagnostico, use_container_width=True)
        
        # Gr√°ficos de diagn√≥stico
        col1, col2 = st.columns(2)
        
        with col1:
            fig_vulnerabilidad = px.bar(
                df_diagnostico,
                x="Sector",
                y="Porcentaje Alto Riesgo",
                title="Porcentaje de Familias en Alto Riesgo por Sector",
                color="Vulnerabilidad",
                color_discrete_map={"Alta": "red", "Media": "orange", "Baja": "green", "Cr√≠tica": "darkred"}
            )
            fig_vulnerabilidad.update_layout(xaxis_tickangle=-45)
            st.plotly_chart(fig_vulnerabilidad, use_container_width=True)
        
        with col2:
            fig_problemas = px.bar(
                df_diagnostico,
                x="Sector",
                y="Familias Alto Riesgo",
                title="Familias en Alto Riesgo por Sector",
                color="Problema Principal",
                color_discrete_map={
                    "Hacinamiento": "orange",
                    "Violencia Intrafamiliar": "red",
                    "Consumo de Drogas": "purple",
                    "Embarazo Adolescente": "pink",
                    "Ninguno": "green"
                }
            )
            fig_problemas.update_layout(xaxis_tickangle=-45)
            st.plotly_chart(fig_problemas, use_container_width=True)
    
    # An√°lisis de factores de riesgo
    st.markdown("### üö® An√°lisis de Factores de Riesgo")
    
    if st.session_state.familias:
        # Crear DataFrame para an√°lisis
        familias_data = []
        for familia in st.session_state.familias:
            familias_data.append({
                "Sector": familia["sector"],
                "Apellido": familia["apellido"],
                "Riesgo Social": familia["riesgos"]["social"]["nivel"],
                "Riesgo Sanitario": familia["riesgos"]["sanitario"]["nivel"],
                "Puntaje Social": familia["riesgos"]["social"]["puntaje"],
                "Puntaje Sanitario": familia["riesgos"]["sanitario"]["puntaje"],
                "Hacinamiento": familia["vivienda"]["hacinamiento"],
                "Red Apoyo": familia["vivienda"]["red_apoyo"],
                "Participaci√≥n Social": familia["vivienda"]["participacion_social"],
                "Acceso APS": familia["vivienda"]["acceso_aps"],
                "Violencia Intrafamiliar": familia["salud"]["violencia_intrafamiliar"],
                "Consumo Drogas": familia["salud"]["consumo_drogas"],
                "Embarazo Adolescente": familia["salud"]["embarazo_adolescente"],
                "Desempleo": familia["salud"]["desempleo"]
            })
        
        df_familias = pd.DataFrame(familias_data)
        
        # An√°lisis de correlaciones
        col1, col2 = st.columns(2)
        
        with col1:
            # Distribuci√≥n de riesgos
            fig_riesgos = px.histogram(
                df_familias,
                x="Puntaje Social",
                color="Riesgo Social",
                title="Distribuci√≥n de Riesgo Social",
                color_discrete_map={"Alto": "red", "Medio": "orange", "Bajo": "green"}
            )
            st.plotly_chart(fig_riesgos, use_container_width=True)
        
        with col2:
            fig_riesgo_sanitario = px.histogram(
                df_familias,
                x="Puntaje Sanitario",
                color="Riesgo Sanitario",
                title="Distribuci√≥n de Riesgo Sanitario",
                color_discrete_map={"Alto": "red", "Medio": "orange", "Bajo": "green"}
            )
            st.plotly_chart(fig_riesgo_sanitario, use_container_width=True)
        
        # An√°lisis de problemas espec√≠ficos
        st.markdown("### üìà An√°lisis de Problemas Espec√≠ficos")
        
        problemas_data = {
            "Problema": ["Violencia Intrafamiliar", "Consumo de Drogas", "Embarazo Adolescente", 
                        "Desempleo", "Hacinamiento Alto", "Red de Apoyo D√©bil"],
            "Cantidad": [
                sum(1 for f in st.session_state.familias if f["salud"]["violencia_intrafamiliar"]),
                sum(1 for f in st.session_state.familias if f["salud"]["consumo_drogas"]),
                sum(1 for f in st.session_state.familias if f["salud"]["embarazo_adolescente"]),
                sum(1 for f in st.session_state.familias if f["salud"]["desempleo"]),
                sum(1 for f in st.session_state.familias if f["vivienda"]["hacinamiento"] == "Alto"),
                sum(1 for f in st.session_state.familias if f["vivienda"]["red_apoyo"] == "D√©bil")
            ]
        }
        
        df_problemas = pd.DataFrame(problemas_data)
        df_problemas["Porcentaje"] = (df_problemas["Cantidad"] / len(st.session_state.familias)) * 100
        
        col1, col2 = st.columns(2)
        
        with col1:
            fig_problemas_barras = px.bar(
                df_problemas,
                x="Problema",
                y="Cantidad",
                title="Problemas Identificados",
                color="Cantidad",
                color_continuous_scale="Reds"
            )
            fig_problemas_barras.update_layout(xaxis_tickangle=-45)
            st.plotly_chart(fig_problemas_barras, use_container_width=True)
        
        with col2:
            fig_problemas_pie = px.pie(
                df_problemas,
                values="Cantidad",
                names="Problema",
                title="Distribuci√≥n de Problemas"
            )
            st.plotly_chart(fig_problemas_pie, use_container_width=True)
    
    # Preguntas orientadoras para el diagn√≥stico
    st.markdown("### ü§î Preguntas Orientadoras para el Diagn√≥stico")
    
    st.markdown("""
    **Responde estas preguntas para formular tu diagn√≥stico comunitario:**
    """)
    
    with st.expander("üìù Formulario de Diagn√≥stico", expanded=True):
        # Preguntas sobre la situaci√≥n actual
        st.markdown("**1. Situaci√≥n Actual de la Comunidad:**")
        
        problema_principal = st.text_area(
            "¬øCu√°l es el problema principal identificado en la comunidad?",
            placeholder="Describe el problema m√°s relevante..."
        )
        
        factores_riesgo = st.multiselect(
            "¬øQu√© factores de riesgo son m√°s prevalentes?",
            ["Hacinamiento", "Violencia intrafamiliar", "Consumo de drogas", 
             "Embarazo adolescente", "Desempleo", "Falta de acceso a servicios", 
             "Enfermedades cr√≥nicas", "Discriminaci√≥n", "Otros"]
        )
        
        recursos_comunidad = st.text_area(
            "¬øQu√© recursos y fortalezas tiene la comunidad?",
            placeholder="Describe los recursos disponibles..."
        )
        
        # Preguntas sobre priorizaci√≥n
        st.markdown("**2. Priorizaci√≥n de Intervenciones:**")
        
        grupo_prioritario = st.selectbox(
            "¬øQu√© grupo requiere intervenci√≥n prioritaria?",
            ["Familias en alto riesgo", "Adolescentes", "Adultos mayores", 
             "Personas con discapacidad", "Mujeres embarazadas", "Otros"]
        )
        
        justificacion_prioridad = st.text_area(
            "¬øPor qu√© es prioritario este grupo?",
            placeholder="Justifica tu selecci√≥n..."
        )
        
        # Preguntas sobre estrategias
        st.markdown("**3. Estrategias de Intervenci√≥n:**")
        
        enfoque_intervencion = st.selectbox(
            "¬øQu√© enfoque de intervenci√≥n es m√°s apropiado?",
            ["Individual", "Familiar", "Comunitario", "Intersectorial", "Mixto"]
        )
        
        estrategias_propuestas = st.multiselect(
            "¬øQu√© estrategias propones?",
            ["Educaci√≥n en salud", "Acompa√±amiento familiar", "Trabajo en red", 
             "Promoci√≥n de participaci√≥n", "Mejora de acceso a servicios", 
             "Prevenci√≥n de violencia", "Otros"]
        )
        
        # Preguntas sobre evaluaci√≥n
        st.markdown("**4. Evaluaci√≥n y Seguimiento:**")
        
        indicadores_evaluacion = st.multiselect(
            "¬øQu√© indicadores usar√≠as para evaluar las intervenciones?",
            ["Reducci√≥n de factores de riesgo", "Mejora en acceso a servicios", 
             "Aumento de participaci√≥n social", "Reducci√≥n de violencia", 
             "Mejora en condiciones de vivienda", "Otros"]
        )
        
        tiempo_intervencion = st.selectbox(
            "¬øEn qu√© plazo esperas ver resultados?",
            ["Corto plazo (3-6 meses)", "Mediano plazo (6-12 meses)", 
             "Largo plazo (1-2 a√±os)", "Continuo"]
        )
        
        # Guardar diagn√≥stico
        if st.button("üíæ Guardar Diagn√≥stico", type="primary"):
            diagnostico_completo = {
                "problema_principal": problema_principal,
                "factores_riesgo": factores_riesgo,
                "recursos_comunidad": recursos_comunidad,
                "grupo_prioritario": grupo_prioritario,
                "justificacion_prioridad": justificacion_prioridad,
                "enfoque_intervencion": enfoque_intervencion,
                "estrategias_propuestas": estrategias_propuestas,
                "indicadores_evaluacion": indicadores_evaluacion,
                "tiempo_intervencion": tiempo_intervencion,
                "fecha_diagnostico": datetime.now().strftime("%Y-%m-%d %H:%M")
            }
            
            st.session_state.diagnostico = diagnostico_completo
            st.success("‚úÖ Diagn√≥stico guardado exitosamente!")
    
    # Mostrar diagn√≥stico guardado
    if hasattr(st.session_state, 'diagnostico') and st.session_state.diagnostico:
        st.markdown("### üìã Diagn√≥stico Guardado")
        
        diagnostico = st.session_state.diagnostico
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("**Problema Principal:**")
            st.info(diagnostico["problema_principal"])
            
            st.markdown("**Grupo Prioritario:**")
            st.success(diagnostico["grupo_prioritario"])
            
            st.markdown("**Enfoque de Intervenci√≥n:**")
            st.warning(diagnostico["enfoque_intervencion"])
        
        with col2:
            st.markdown("**Factores de Riesgo:**")
            for factor in diagnostico["factores_riesgo"]:
                st.write(f"‚Ä¢ {factor}")
            
            st.markdown("**Estrategias Propuestas:**")
            for estrategia in diagnostico["estrategias_propuestas"]:
                st.write(f"‚Ä¢ {estrategia}")
        
        st.markdown("**Recursos de la Comunidad:**")
        st.info(diagnostico["recursos_comunidad"])
        
        st.markdown("**Justificaci√≥n de Prioridad:**")
        st.info(diagnostico["justificacion_prioridad"])
        
        st.markdown(f"**Fecha del Diagn√≥stico:** {diagnostico['fecha_diagnostico']}")
    
    # Recomendaciones finales
    st.markdown("### üí° Recomendaciones para el Diagn√≥stico")
    
    if st.session_state.familias:
        total_familias = len(st.session_state.familias)
        familias_alto_riesgo = sum(1 for f in st.session_state.familias 
                                 if f["riesgos"]["social"]["nivel"] == "Alto" or 
                                 f["riesgos"]["sanitario"]["nivel"] == "Alto")
        
        porcentaje_alto_riesgo = (familias_alto_riesgo / total_familias) * 100
        
        if porcentaje_alto_riesgo > 30:
            st.error("üö® **ALERTA:** M√°s del 30% de las familias est√°n en alto riesgo. Se requiere intervenci√≥n inmediata.")
        elif porcentaje_alto_riesgo > 15:
            st.warning("‚ö†Ô∏è **ATENCI√ìN:** Entre 15-30% de las familias est√°n en alto riesgo. Se requiere plan de intervenci√≥n.")
        else:
            st.success("‚úÖ **SITUACI√ìN CONTROLADA:** Menos del 15% de las familias est√°n en alto riesgo.")
        
        # Recomendaciones espec√≠ficas
        st.markdown("**Recomendaciones espec√≠ficas:**")
        
        if sum(1 for f in st.session_state.familias if f["salud"]["violencia_intrafamiliar"]) > 0:
            st.error("‚Ä¢ Implementar protocolos de detecci√≥n y derivaci√≥n de violencia intrafamiliar")
        
        if sum(1 for f in st.session_state.familias if f["vivienda"]["hacinamiento"] == "Alto") > 0:
            st.warning("‚Ä¢ Trabajar con servicios de vivienda para mejorar condiciones habitacionales")
        
        if sum(1 for f in st.session_state.familias if f["salud"]["consumo_drogas"]) > 0:
            st.error("‚Ä¢ Establecer alianzas con programas de tratamiento de adicciones")
        
        if sum(1 for f in st.session_state.familias if f["vivienda"]["red_apoyo"] == "D√©bil") > 0:
            st.info("‚Ä¢ Fortalecer redes de apoyo comunitario")
    
    # Dashboard Inteligente
    st.markdown("---")
    st.markdown("### ü§ñ Dashboard Inteligente")
    
    if st.button("üîÑ Actualizar An√°lisis Inteligente", key="actualizar_dashboard"):
        with st.spinner("Analizando datos en tiempo real..."):
            diagnostico_inteligente = analizar_datos_comunidad()
            
            # M√©tricas inteligentes
            col1, col2, col3, col4 = st.columns(4)
            
            with col1:
                total_problemas = len(diagnostico_inteligente['problemas_prioritarios'])
                st.metric("Problemas Prioritarios", total_problemas)
            
            with col2:
                total_vulnerables = len(diagnostico_inteligente['poblaciones_vulnerables'])
                st.metric("Poblaciones Vulnerables", total_vulnerables)
            
            with col3:
                total_fortalezas = len(set(diagnostico_inteligente['fortalezas_comunitarias']))
                st.metric("Fortalezas Identificadas", total_fortalezas)
            
            with col4:
                total_recursos = len(diagnostico_inteligente['recursos_disponibles'])
                st.metric("Recursos Disponibles", total_recursos)
            
            # Alertas inteligentes
            st.subheader("üö® Alertas Inteligentes")
            
            if diagnostico_inteligente['problemas_prioritarios']:
                st.error("**ALERTA CR√çTICA:** Se identificaron problemas prioritarios que requieren intervenci√≥n inmediata")
                for problema in diagnostico_inteligente['problemas_prioritarios']:
                    st.write(f"‚Ä¢ **{problema['problema'].title()}**: {problema['cantidad']} familias afectadas ({problema['porcentaje']:.1f}%)")
            else:
                st.success("‚úÖ **SITUACI√ìN ESTABLE:** No se identificaron problemas prioritarios")
            
            if diagnostico_inteligente['poblaciones_vulnerables']:
                st.warning("**ATENCI√ìN:** Poblaciones vulnerables identificadas")
                for poblacion in diagnostico_inteligente['poblaciones_vulnerables']:
                    st.write(f"‚Ä¢ {poblacion}")
            
            # Oportunidades de intervenci√≥n
            if diagnostico_inteligente['fortalezas_comunitarias']:
                st.subheader("üí™ Oportunidades de Intervenci√≥n")
                st.success("**Fortalezas comunitarias que pueden potenciarse:**")
                for fortaleza in set(diagnostico_inteligente['fortalezas_comunitarias']):
                    st.write(f"‚Ä¢ {fortaleza}")
            
            if diagnostico_inteligente['recursos_disponibles']:
                st.info("**Recursos disponibles para alianzas:**")
                for recurso in diagnostico_inteligente['recursos_disponibles']:
                    st.write(f"‚Ä¢ {recurso}")
            
            # Recomendaciones autom√°ticas
            st.subheader("üéØ Recomendaciones Autom√°ticas")
            
            if diagnostico_inteligente['problemas_prioritarios']:
                st.info("**Acciones recomendadas:**")
                
                for problema in diagnostico_inteligente['problemas_prioritarios']:
                    if problema['problema'] == 'diabetes':
                        st.write("‚Ä¢ Implementar programa de educaci√≥n diabetol√≥gica")
                        st.write("‚Ä¢ Establecer grupos de apoyo para diab√©ticos")
                    elif problema['problema'] == 'hipertension':
                        st.write("‚Ä¢ Crear programa de control de presi√≥n arterial")
                        st.write("‚Ä¢ Talleres de reducci√≥n de sodio")
                    elif problema['problema'] == 'obesidad':
                        st.write("‚Ä¢ Programa de actividad f√≠sica comunitaria")
                        st.write("‚Ä¢ Talleres de nutrici√≥n")
                    elif problema['problema'] == 'violencia_intrafamiliar':
                        st.write("‚Ä¢ Protocolos de detecci√≥n temprana")
                        st.write("‚Ä¢ Talleres de resoluci√≥n pac√≠fica de conflictos")
                    elif problema['problema'] == 'consumo_drogas':
                        st.write("‚Ä¢ Programa de prevenci√≥n en colegios")
                        st.write("‚Ä¢ Actividades deportivas y recreativas")
                    elif problema['problema'] == 'embarazo_adolescente':
                        st.write("‚Ä¢ Educaci√≥n sexual integral")
                        st.write("‚Ä¢ Acceso a m√©todos anticonceptivos")
                    elif problema['problema'] == 'hacinamiento':
                        st.write("‚Ä¢ Gesti√≥n de subsidios habitacionales")
                        st.write("‚Ä¢ Asesor√≠a en mejoras habitacionales")
                    elif problema['problema'] == 'desempleo':
                        st.write("‚Ä¢ Programa de capacitaci√≥n laboral")
                        st.write("‚Ä¢ Talleres de emprendimiento")
                    elif problema['problema'] == 'baja_escolaridad':
                        st.write("‚Ä¢ Programa de alfabetizaci√≥n")
                        st.write("‚Ä¢ Apoyo escolar")
                    elif problema['problema'] == 'acceso_salud':
                        st.write("‚Ä¢ Transporte comunitario a centros de salud")
                        st.write("‚Ä¢ Atenci√≥n domiciliaria")
            
            # Bot√≥n para generar plan autom√°tico
            if st.button("üìã Generar Plan de Intervenci√≥n Autom√°tico", key="generar_plan_auto"):
                st.success("‚úÖ Plan generado autom√°ticamente. Revisa el m√≥dulo 'Plan Anual' para ver las sugerencias.")
                st.info("üí° **Tip:** Usa el bot√≥n 'Generar Sugerencias Inteligentes' en el m√≥dulo de Plan Anual para obtener intervenciones espec√≠ficas.") 